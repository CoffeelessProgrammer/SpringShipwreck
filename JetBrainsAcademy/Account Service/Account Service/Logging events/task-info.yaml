type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/contracts/UserInfoCM.java
  visible: true
  text: |
    package account.contracts;

    import account.models.Authority;
    import account.models.UserEntity;
    import lombok.Data;
    import org.springframework.security.core.GrantedAuthority;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Set;

    @Data
    public class UserInfoCM {
        private long id;
        private String name;
        private String lastname;
        private String email;
        private List<String> roles;

        public UserInfoCM(UserEntity userEntity) {
            this.id = userEntity.getPublicId();
            this.name = userEntity.getFirstName();
            this.lastname = userEntity.getLastName();
            this.email = userEntity.getUsername();
            this.roles = new ArrayList<>();

            for(GrantedAuthority authority : userEntity.getAuthorities())
                this.roles.add(authority.getAuthority());

            Collections.sort(roles);
        }
    }
  learner_created: true
- name: src/account/repositories/UsersDAO.java
  visible: true
  text: |
    package account.repositories;

    import account.models.UserEntity;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Collection;
    import java.util.List;

    @Repository
    public interface UsersDAO extends CrudRepository<UserEntity, Long> {
        UserEntity findByUsername(String username);
        List<UserEntity> findAllByOrderByPublicIdAsc();
        boolean existsByUsername(String email);
        void deleteByUsername(String email);
    }
  learner_created: true
- name: src/account/validation/ContractValidator.java
  visible: true
  text: |
    package account.validation;

    import account.contracts.PayrollCM;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.regex.Pattern;

    public class ContractValidator {

        private static final Pattern pattern = Pattern.compile(".*password.*", Pattern.CASE_INSENSITIVE);

        public static boolean validatePassword(UserCredential credential) {
            if(pattern.matcher(credential.getPassword()).matches())
                throw new BreachedPasswordException();

            return true;
        }

        public static boolean validate(PayrollCM payrollCM) {
            validatePeriod(payrollCM.getPeriod());
            if(payrollCM.getSalary() < 0)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Negative salary");

            return true;
        }

        public static boolean validatePeriod(String period) {
            if(period != null && period.length() == 0) return true;

            final int month = Integer.parseInt(period.split("-")[0]);
            if(month > 12 || month < 1)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid month");

            return true;
        }
    }
  learner_created: true
- name: src/account/security/UserRoles.java
  visible: true
  text: |
    package account.security;

    public enum UserRoles {
        USER, ACCOUNTANT, ADMINISTRATOR
    }
  learner_created: true
- name: src/account/models/Authority.java
  visible: true
  text: |
    package account.models;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.Embeddable;

    @Embeddable
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Authority implements GrantedAuthority {

        private String authority;

    //    public boolean equals(String str) {
    //        return str.equals(this.authority);
    //    }
    }
  learner_created: true
- name: src/account/controllers/UserMgmtAPI.java
  visible: true
  text: |-
    package account.controllers;

    import account.contracts.*;
    import account.models.UserEntity;
    import account.services.UserEntityManager;
    import account.validation.ContractValidator;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.validation.Errors;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;

    @RestController
    @RequestMapping("/api/auth")
    public class UserMgmtAPI {

        @Autowired
        UserEntityManager usersService;

        @PostMapping("/signup")
        ResponseEntity<UserInfoCM> userRegistration(@RequestBody @Valid UserRegistrationCM request, Errors errors) {
            if(errors.hasFieldErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, errors.getFieldError().getDefaultMessage());
            }
            ContractValidator.validatePassword(request);
            UserEntity newUser = usersService.createUser(new UserEntity(request));
            return new ResponseEntity<>(new UserInfoCM(newUser), HttpStatus.OK);
        }

        @PostMapping("/changepass")
        ResponseEntity<PasswordChangeResponseCM> changePassword(@AuthenticationPrincipal UserEntity user,
                                                                @RequestBody @Valid PasswordChangeCM request,
                                                                Errors errors) {
            if(errors.hasFieldErrors()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, errors.getFieldError().getDefaultMessage());
            }
            PasswordChangeResponseCM response = new PasswordChangeResponseCM(user.getUsername());
            ContractValidator.validatePassword(request);
            usersService.changePassword(user.getPassword(), request.getNewPassword());
            return new ResponseEntity<>(response, HttpStatus.OK);
        }

    }
  learner_created: true
- name: src/account/services/UsersServiceImpl.java
  visible: true
  text: |
    package account.services;

    import account.models.UserEntity;
    import account.repositories.UsersDAO;
    import account.validation.UsernameExistsException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    @Service
    public class UsersServiceImpl implements UserEntityManager {
        @Autowired
        UsersDAO usersDAO;

        @Autowired
        PasswordEncoder passwordEncoder;

        @Override
        public UserEntity loadUserByUsername(String username) throws UsernameNotFoundException {
            UserEntity user = usersDAO.findByUsername(username.toLowerCase());
            if(user == null) throw new UsernameNotFoundException(username);
            return user;
        }

        public UserEntity createUser(UserEntity user) {
            if(usersDAO.count() == 0)
                user.addRole("ADMINISTRATOR");
            else user.addRole("USER");

            if(userExists(user.getUsername()))
                throw new UsernameExistsException();

            user.setPassword(passwordEncoder.encode(user.getPassword()));
            usersDAO.save(user);
            return user;
        }

        public void updateUser(UserEntity user) {
        }

        public void deleteUser(String username) {
        }

        public void changePassword(String oldPassword, String newPassword) throws AuthenticationException {
            Authentication currentUser = SecurityContextHolder.getContext()
                    .getAuthentication();

            UserEntity user = this.loadUserByUsername(currentUser.getName()); // By email

            if(passwordEncoder.matches(newPassword, oldPassword))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");

            user.setPassword(passwordEncoder.encode(newPassword));
            usersDAO.save(user);
        }

        public boolean userExists(String username) {
            UserEntity user = usersDAO.findByUsername(username);
            return user != null;
        }
    }
  learner_created: true
- name: src/account/models/UserEntity.java
  visible: true
  text: |
    package account.models;

    import account.contracts.UserRegistrationCM;
    import com.fasterxml.jackson.annotation.JsonIgnore;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.server.ResponseStatusException;

    import javax.persistence.*;
    import java.util.HashSet;
    import java.util.Set;

    @Entity
    @Table(name = "USERS")
    @Data
    @NoArgsConstructor
    public class UserEntity implements UserDetails {

        @Id
        @GeneratedValue
        @Column(name="user_id")
        private long publicId;

        @Column(name="email", unique=true)
        private String username;
        @JsonIgnore
        private String password;
        private String firstName;
        private String lastName;

        @ElementCollection(targetClass = Authority.class, fetch = FetchType.EAGER)
        @JoinTable(name="AUTHORITIES",
                joinColumns = @JoinColumn(name = "user_id"))
        private Set<GrantedAuthority> authorities = new HashSet<>();

        public UserEntity(UserRegistrationCM request) {
            this.firstName = request.getName();
            this.lastName = request.getLastname();
            this.username = request.getEmail().toLowerCase();
            this.password = request.getPassword();
        }

        public UserEntity(String email) {
            this.username = email;
        }

        public UserEntity(long userId) {
            this.publicId = userId;
        }

        public UserEntity(long userId, String email) {
            this.publicId = userId;
            this.username = email;
        }

        public void setUsername(String username) {
            this.username = username.toLowerCase();
        }

        public boolean addRole(String role) {
            if ((role.equals("ACCOUNTANT") || role.equals("USER")) && this.hasRole("ADMINISTRATOR"))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            if (role.equals("ADMINISTRATOR") && (this.hasRole("USER") || this.hasRole("ACCOUNTANT")))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");

            return this.authorities.add(new Authority("ROLE_" + role));
        }

        public boolean hasRole(String role) {
            return this.authorities.contains(new Authority("ROLE_" + role));
        }

        public boolean removeRole(String role) {
            if (this.authorities.size() < 2)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user must have at least one role!");

            return this.authorities.remove(new Authority("ROLE_" + role));
        }

        //#region Booleans

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        //#endregion
    }
  learner_created: true
- name: src/account/contracts/PayrollCM.java
  visible: true
  text: |
    package account.contracts;

    import com.fasterxml.jackson.annotation.JsonAlias;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    @Data
    @NoArgsConstructor
    public class PayrollCM {
        @NotNull
        @Email(regexp=".*@acme\\.com", flags={Pattern.Flag.CASE_INSENSITIVE})
        @JsonAlias("employee")
        private String employeeEmail;
        @NotNull
        @Pattern(regexp = "[0-1]\\d-20\\d{2}")
        private String period;
        @NotNull
        private long salary;

        public void emailToLowercase() {
            this.employeeEmail = employeeEmail.toLowerCase();
        }

        public void setEmployeeEmail(String email) {
            this.employeeEmail = email.toLowerCase();
        }
    }
  learner_created: true
- name: src/account/contracts/UserRegResponseCM.java
  visible: true
  text: |
    package account.contracts;

    import account.models.UserEntity;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    public class UserRegResponseCM {

        private long id;
        private String name;
        private String lastname;
        private String email;

        public UserRegResponseCM(UserEntity user) {
            this.id = user.getPublicId();
            this.email = user.getUsername();
            this.name = user.getFirstName();
            this.lastname = user.getLastName();
        }
    }
  learner_created: true
- name: src/account/contracts/UserRegistrationCM.java
  visible: true
  text: |
    package account.contracts;

    import account.validation.UserCredential;
    import lombok.Data;

    import javax.validation.constraints.*;

    @Data
    public class UserRegistrationCM implements UserCredential {

        @NotBlank
        private String name;
        @NotBlank
        private String lastname;
        @NotBlank
        @Email(regexp=".*@acme\\.com", flags={Pattern.Flag.CASE_INSENSITIVE})
        private String email;
        @NotBlank
        @Size(min=12, message="The password length must be at least 12 chars!")
        private String password;

    }
  learner_created: true
- name: src/account/contracts/ModifyRoleCM.java
  visible: true
  text: |
    package account.contracts;

    import account.security.AuthorityOperation;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    @Data
    @NoArgsConstructor
    public class ModifyRoleCM {
        @JsonProperty("user")
        @NotBlank
        @Email(regexp=".*@acme\\.com", flags={Pattern.Flag.CASE_INSENSITIVE})
        private String email;

        @NotBlank
        private String role;

        @NotNull
        private AuthorityOperation operation;

        public void setRole(String role) {
            this.role = role.toUpperCase();
        }

        public void setEmail(String email) {
            this.email = email.toLowerCase();
        }

    }
  learner_created: true
- name: src/account/services/UserEntityManager.java
  visible: true
  text: |
    package account.services;

    import account.models.UserEntity;
    import org.springframework.security.core.userdetails.UserDetailsService;

    public interface UserEntityManager extends UserDetailsService {

        UserEntity createUser(UserEntity user);
        void updateUser(UserEntity user);
        void deleteUser(String username);
        void changePassword(String oldPassword, String newPassword);
        boolean userExists(String username);
    }
  learner_created: true
- name: src/account/validation/UsernameExistsException.java
  visible: true
  text: |
    package account.validation;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.BAD_REQUEST) // Should be Conflict
    public class UsernameExistsException extends RuntimeException {

        public UsernameExistsException() {
            super("User exist!");
        }
    }
  learner_created: true
- name: src/account/contracts/PasswordChangeCM.java
  visible: true
  text: |
    package account.contracts;

    import account.validation.UserCredential;
    import com.fasterxml.jackson.annotation.JsonAlias;
    import lombok.Data;

    import javax.validation.constraints.Size;

    @Data
    public class PasswordChangeCM implements UserCredential {

        @JsonAlias("new_password")
        @Size(min=12, message="Password length must be 12 chars minimum!")
        private String newPassword;

        @Override
        public String getPassword() {
            return this.newPassword;
        }
    }
  learner_created: true
- name: src/account/models/PayrollPK.java
  visible: true
  text: |
    package account.models;

    import account.util.DateUtil;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.Embeddable;
    import java.io.Serializable;
    import java.time.LocalDate;

    @Data
    @Embeddable
    @NoArgsConstructor
    public class PayrollPK implements Serializable {
        private long employeeId;
        private LocalDate period;   // Convert to/from format: mm-YYYY e.g. 07-2022

        public PayrollPK(long userId, String period) {
            this.employeeId = userId;
            this.period = DateUtil.mmYYYYToLocalDate(period);
        }
    }
  learner_created: true
- name: src/account/validation/BreachedPasswordException.java
  visible: true
  text: |
    package account.validation;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public class BreachedPasswordException extends RuntimeException {

        public BreachedPasswordException() {
            super("The password is in the hacker's database!");
        }
    }
  learner_created: true
- name: src/account/contracts/PayrollResponseCM.java
  visible: true
  text: |
    package account.contracts;

    import account.models.PayrollEntity;
    import account.models.UserEntity;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.annotation.JsonPropertyOrder;
    import lombok.Data;

    import java.time.LocalDate;

    @Data
    @JsonPropertyOrder({"name", "lastname", "period", "salary"})
    public class PayrollResponseCM {
        @JsonProperty("name")
        private String firstName;
        @JsonProperty("lastname")
        private String lastName;
        private String period;
        private String salary;

        public PayrollResponseCM(PayrollEntity payrollEntity, UserEntity employee) {
            LocalDate period = payrollEntity.getPayrollId().getPeriod();
            String month = period.getMonth().name();
            this.period = month.charAt(0) + month.substring(1).toLowerCase() + "-" + period.getYear();
            this.salary = salaryToString(payrollEntity.getSalary());
            this.firstName = employee.getFirstName();
            this.lastName = employee.getLastName();
        }

        private static String salaryToString(long salary) {
            return salary/100 + " dollar(s) " + salary%100 + " cent(s)";
        }
    }
  learner_created: true
- name: src/account/util/DateUtil.java
  visible: true
  text: |
    package account.util;

    import java.time.LocalDate;
    import java.util.regex.Pattern;

    public class DateUtil {

        private static final Pattern mmYYYY = Pattern.compile("[0-1]\\d-20\\d{2}");

        public static LocalDate mmYYYYToLocalDate(String input) {
            if (!mmYYYY.matcher(input).matches())
                throw new IllegalArgumentException("Required format: mm-YYYY");

            String[] dateTokens = input.split("-");
            final int month = Integer.parseInt(dateTokens[0]);
            if (month>12) throw new IllegalArgumentException("Invalid month");
            final int year = Integer.parseInt(dateTokens[1]);

            LocalDate date = LocalDate.of(month < 12 ? year : year+1,
                    month < 12 ? month+1 : 1, 1);
            return date.minusDays(1L);
        }

        public static String locateDateTommYYYY(LocalDate input) {
            return input.getMonth().getValue() + "-" + input.getYear();
        }
    }
  learner_created: true
- name: src/account/security/AuthorityOperation.java
  visible: true
  text: |
    package account.security;

    public enum AuthorityOperation {
        GRANT, REMOVE
    }
  learner_created: true
- name: src/account/controllers/ExceptionInterceptor.java
  visible: true
  text: |
    package account.controllers;

    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @ControllerAdvice
    public class ExceptionInterceptor extends ResponseEntityExceptionHandler {

        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(
                MethodArgumentNotValidException ex,
                HttpHeaders headers,
                HttpStatus status,
                WebRequest request) {

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("status", status.value());
            body.put("timestamp", LocalDateTime.now());
            body.put("exception", ex.getClass());
            return new ResponseEntity<>(body, headers, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/account/controllers/AdminAPI.java
  visible: true
  text: |
    package account.controllers;

    import account.contracts.ModifyRoleCM;
    import account.contracts.UserInfoCM;
    import account.models.UserEntity;
    import account.security.AuthorityOperation;
    import account.services.AdminService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/admin")
    @Validated
    public class AdminAPI {

        @Autowired
        AdminService adminService;

        @GetMapping("/user")
        public ResponseEntity<List<UserInfoCM>> getUsers() {
            return new ResponseEntity<>(adminService.getAllUsers(), HttpStatus.OK);
        }

        @PutMapping("/user/role")
        public ResponseEntity<UserInfoCM> modifyRole(@RequestBody ModifyRoleCM modifyRoleCM, @AuthenticationPrincipal UserEntity admin) {
            if(modifyRoleCM.getOperation() == AuthorityOperation.REMOVE
                    && modifyRoleCM.getRole().equals("ADMINISTRATOR")
                    && modifyRoleCM.getEmail().matches(admin.getUsername()))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");

            UserInfoCM response = adminService.modifyUserRole(modifyRoleCM);

            return new ResponseEntity<>(response, HttpStatus.OK);
        }

        @DeleteMapping("/user/{email}")
        public ResponseEntity<Map<String, String>> deleteUser(@PathVariable @NotNull @Email String email, @AuthenticationPrincipal UserEntity admin) {
            if(admin.getUsername().equals(email))
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");

            adminService.deleteUser(email);

            Map<String, String> response = new LinkedHashMap<>();
            response.put("user", email);
            response.put("status", "Deleted successfully!");
            return new ResponseEntity<>(response, HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/account/security/WebSecurityConfig.java
  visible: true
  text: |
    package account.security;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @EnableWebSecurity
    public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        RestAuthenticationEntryPoint restAuthEntryPoint;

        @Autowired
        AccessDeniedHandler accessDeniedHandler;

        @Bean
        PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder(13);
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.authorizeRequests() // manage access
                    .mvcMatchers("/api/auth/signup").permitAll()
                    .mvcMatchers("/api/auth/changepass").authenticated()
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyRole("USER", "ACCOUNTANT")
                    .mvcMatchers("/api/acct/payments").hasRole("ACCOUNTANT")
                    .mvcMatchers("/api/admin/**").hasRole("ADMINISTRATOR")
                    .and().csrf().disable().headers().frameOptions().disable() // For Postman, the H2 console
                    .and().httpBasic().authenticationEntryPoint(restAuthEntryPoint) // Handle auth error
                    .and().exceptionHandling().accessDeniedHandler(accessDeniedHandler)
                    .and().sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        }

    }
  learner_created: true
- name: src/account/models/PayrollEntity.java
  visible: true
  text: |
    package account.models;

    import account.contracts.PayrollCM;
    import lombok.Data;
    import lombok.NoArgsConstructor;

    import javax.persistence.*;

    @Entity
    @Data
    @NoArgsConstructor
    @Table(name = "Payroll")
    public class PayrollEntity {
        @EmbeddedId
        PayrollPK payrollId;

        @ManyToOne @MapsId("employeeId")
        private UserEntity employee;

        @Column(nullable = false)
        private long salary;    // In cents

        public PayrollEntity(PayrollCM payroll, UserEntity user) {
            this.payrollId = new PayrollPK(user.getPublicId(), payroll.getPeriod());
            this.employee = user;
            this.salary = payroll.getSalary();;
        }
    }
  learner_created: true
- name: src/account/services/PayrollService.java
  visible: true
  text: |
    package account.services;

    import account.contracts.PayrollCM;
    import account.contracts.PayrollResponseCM;
    import account.models.PayrollEntity;
    import account.models.PayrollPK;
    import account.models.UserEntity;
    import account.repositories.PayrollDAO;
    import account.repositories.UsersDAO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;

    @Service
    public class PayrollService {

        @Autowired
        UsersDAO usersDAO;

        @Autowired
        PayrollDAO payrollDao;

        public PayrollResponseCM getPayrollEntry(String period, UserEntity employee) {
            PayrollPK payrollKey = new PayrollPK(employee.getPublicId(), period);
            Optional<PayrollEntity> payrollOptional = payrollDao.findById(payrollKey);
            PayrollEntity payrollEntity = payrollOptional.orElseThrow(() ->
                    new ResponseStatusException(HttpStatus.BAD_REQUEST, "Payroll entry not found"));

            return new PayrollResponseCM(payrollEntity, employee);
        }

        public List<PayrollResponseCM> getPayrollEntries(UserEntity employee) {
            List<PayrollResponseCM> response = new ArrayList<>();
            List<PayrollEntity> payrollRecords = payrollDao.findAllByPayrollId_EmployeeIdOrderByPayrollId_PeriodDesc(employee.getPublicId());

            for(PayrollEntity payrollRecord : payrollRecords)
                response.add(new PayrollResponseCM(payrollRecord, employee));

            return response;
        }

        @Transactional
        public void addPayrollEntries(List<PayrollCM> payrolls) {
            for(PayrollCM payroll : payrolls) {
                UserEntity employee = usersDAO.findByUsername(payroll.getEmployeeEmail());
                if(employee==null)
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Employee not found");

                PayrollPK payrollKey = new PayrollPK(employee.getPublicId(), payroll.getPeriod());
                Optional<PayrollEntity> payrollOptional = payrollDao.findById(payrollKey);
                if(payrollOptional.isPresent())
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Payroll entry already exists");

                PayrollEntity payrollEntity = new PayrollEntity(payroll, employee);
                payrollDao.save(payrollEntity);
            }
        }

        public void updatePayrollEntry(PayrollCM payroll) {
            UserEntity employee = usersDAO.findByUsername(payroll.getEmployeeEmail());
            if(employee==null)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Employee not found");

            PayrollPK payrollKey = new PayrollPK(employee.getPublicId(), payroll.getPeriod());
            Optional<PayrollEntity> payrollOptional = payrollDao.findById(payrollKey);
            PayrollEntity payrollEntity = payrollOptional.orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, "Payroll entry not found"));
            payrollEntity.setSalary(payroll.getSalary());
            payrollDao.save(payrollEntity);
        }
    }
  learner_created: true
- name: src/account/contracts/PasswordChangeResponseCM.java
  visible: true
  text: |
    package account.contracts;

    import lombok.Data;
    import lombok.NoArgsConstructor;

    @Data
    @NoArgsConstructor
    public class PasswordChangeResponseCM {

        private static final String success = "The password has been updated successfully";

        private String email;
        private String status;

        public PasswordChangeResponseCM(String email) {
            this.email = email;
            this.status = success;
        }
    }
  learner_created: true
- name: src/account/security/CustomAccessDeniedHandler.java
  visible: true
  text: |
    package account.security;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.sql.Timestamp;
    import java.text.SimpleDateFormat;
    import java.util.LinkedHashMap;
    import java.util.Map;

    @Component
    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

        @Override
        public void handle(HttpServletRequest request,
                           HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {
            response.setContentType("application/json;charset=UTF-8");
            response.setStatus(403);

            Timestamp timestamp = new Timestamp(System.currentTimeMillis());

            Map<String, Object> payload = new LinkedHashMap<>();
            payload.put("timestamp", sdf.format(timestamp));
            payload.put("status", 403);
            payload.put("error", "Forbidden");
            payload.put("message", "Access Denied!");
            payload.put("path", request.getServletPath());

            String json = new ObjectMapper().writeValueAsString(payload);

            response.getWriter().write(json);
        }
    }
  learner_created: true
- name: src/account/security/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.security;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request,
                             HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/services/AdminService.java
  visible: true
  text: |
    package account.services;

    import account.contracts.ModifyRoleCM;
    import account.contracts.UserInfoCM;
    import account.models.UserEntity;
    import account.repositories.UsersDAO;
    import account.security.UserRoles;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class AdminService {

        @Autowired
        UsersDAO usersDAO;

        public UserInfoCM modifyUserRole(ModifyRoleCM modifyRoleCM) {
            if (!usersDAO.existsByUsername(modifyRoleCM.getEmail()))
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            try {
                UserRoles.valueOf(modifyRoleCM.getRole());
            } catch (IllegalArgumentException ex) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
            }

            UserEntity userEntity = usersDAO.findByUsername(modifyRoleCM.getEmail());

            switch (modifyRoleCM.getOperation()) {
                case GRANT: {
                    if (userEntity.addRole(modifyRoleCM.getRole().toUpperCase())) usersDAO.save(userEntity);
                    break;
                }
                case REMOVE: {
                    if (!userEntity.hasRole(modifyRoleCM.getRole()))
                        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");

                    userEntity.removeRole(modifyRoleCM.getRole());
                    usersDAO.save(userEntity);
                    break;
                }
            }

            return new UserInfoCM(userEntity);
        }

        public List<UserInfoCM> getAllUsers() {
            List<UserInfoCM> users = new ArrayList<>();
            List<UserEntity> userEntities = usersDAO.findAllByOrderByPublicIdAsc();

            for(UserEntity user : userEntities)
                users.add(new UserInfoCM(user));

            return users;
        }

        @Transactional
        public void deleteUser(String email) {
            if(!usersDAO.existsByUsername(email))
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");

            usersDAO.deleteByUsername(email);
        }
    }
  learner_created: true
- name: src/account/controllers/PayrollAPI.java
  visible: true
  text: |
    package account.controllers;

    import account.contracts.PayrollCM;
    import account.models.UserEntity;
    import account.services.PayrollService;
    import account.validation.ContractValidator;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.context.request.ServletWebRequest;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.ConstraintViolationException;
    import javax.validation.Valid;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.Optional;

    @RestController
    @Validated
    @RequestMapping("/api")
    public class PayrollAPI {

        @Autowired
        PayrollService payrollService;

        @GetMapping("/empl/payment")
        ResponseEntity<Object> getEmployeePayroll(@RequestParam Optional<String> period,
                                                  @AuthenticationPrincipal UserEntity employee) {
            ContractValidator.validatePeriod(period.orElse(""));

            Object response;

            if(period.isPresent())
                response = this.payrollService.getPayrollEntry(period.get(), employee);
            else
                response = this.payrollService.getPayrollEntries(employee);

            return new ResponseEntity<>(response, HttpStatus.OK);
        }

        @PostMapping("/acct/payments")
        ResponseEntity<Map<String, Object>> getEmployeePayroll(@RequestBody @Valid List<PayrollCM> payrolls) {
            for(PayrollCM payrollCM : payrolls) ContractValidator.validate(payrollCM);

            this.payrollService.addPayrollEntries(payrolls);

            Map<String, Object> response = new HashMap<>();
            response.put("status", "Added successfully!");
            return new ResponseEntity<>(response, HttpStatus.OK);
        }

        @PutMapping("/acct/payments")
        ResponseEntity<Map<String, String>> updateEmployeeSalary(@RequestBody @Valid PayrollCM payroll) {
            ContractValidator.validate(payroll);

            this.payrollService.updatePayrollEntry(payroll);

            Map<String, String> response = new HashMap<>();
            response.put("status", "Updated successfully!");
            return new ResponseEntity<>(response, HttpStatus.OK);
        }

        @ExceptionHandler({ConstraintViolationException.class})
        void handleContraintViolationException(ConstraintViolationException exception,
                                               ServletWebRequest webRequest) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid request");
        }
    }
  learner_created: true
- name: src/account/repositories/PayrollDAO.java
  visible: true
  text: |
    package account.repositories;

    import account.models.PayrollEntity;
    import account.models.PayrollPK;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;

    public interface PayrollDAO extends CrudRepository<PayrollEntity, PayrollPK> {
        List<PayrollEntity> findAllByPayrollId_EmployeeIdOrderByPayrollId_PeriodDesc(long employeeId);
    }
  learner_created: true
- name: src/account/validation/UserCredential.java
  visible: true
  text: |
    package account.validation;

    public interface UserCredential {

        String getPassword();
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Unchecked
record: -1
